{"version":3,"sources":["components/AddButton.js","components/CustomerButton.js","components/Manipulators/DateManipulator.js","components/Manipulators/DOMManipulator.js","components/InputsStore.js","components/Manipulators/UsersManipulator.js","components/Chart.js","components/InputBlock.js","components/Manipulators/RenderManipulator.js","components/Home.js","registerServiceWorker.js","index.js"],"names":["AddButton","props","className","onClick","this","text","Component","displayName","name","CustomerButton","id","DateManipulator","dateString","splittedDate","split","offset","Date","getTimezoneOffset","now","d","getTime","getDate","getMonth","getFullYear","toISOString","toLocaleDateString","DOMManipulator","array","i","length","valid","newValue","input","document","getElementById","value","remove","store","UsersManipulator","data","checkFields","alert","checkDistinctIds","getValueById","reg","last","check","getLifeTime","registrationDate","lastActivityDate","user","parseDateFromLocalDateString","oneDay","getOneDayMilliseconds","Math","ceil","users","lifes","result","min","max","currentLifeTime","push","addition","frequency","filter","v","index","a","x","returnCount","regCount","lifeTime","regTime","getRegistrationOffset","findIndex","ind","o","toString","Chart","renderChart","style","background","myCanvas","width","documentElement","clientWidth","height","clientHeight","ctx","getContext","drawLine","startX","startY","endX","endY","color","save","strokeStyle","beginPath","moveTo","lineTo","stroke","restore","drawBar","upperLeftCornerX","upperLeftCornerY","fillStyle","fillRect","options","canvas","colors","draw","maxValue","canvasActualHeight","padding","canvasActualWidth","gridValue","gridY","gridColor","textBaseline","font","fillText","offsetX","barSize","val","barHeight","round","textAlign","seriesName","InputBlock","handleChange","bind","state","event","target","validity","patternMismatch","setState","splice","pattern","type","placeholder","placeHolder","onChange","RenderManipulator","key","buildDataForChart","daysAmount","rolling","rollingRetationXDays","message","isNaN","toFixed","removeCallback","map","Home","userRetentionDtos","counter","loading","countOfErrorFields","uniqueKey","showCharts","onAdd","onSave","onCalculate","onRemove","getUsers","dtos","updateUsersData","checkData","localDateStringToIso","json","JSON","stringify","fetch","method","headers","body","updateUniqueKey","currentTarget","replace","changeValue","removeEmptyFields","dateNow","newId","unshift","prevState","renderRolling","chart","table","renderTable","response","isoToLocalDateString","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","getElementsByTagName","getAttribute","rootElement","title","ReactDOM","render","basename","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8af9a12e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './custom.css';\r\n\r\nexport class AddButton extends Component {\r\n\r\n    static displayName = AddButton.name;\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <button className='add-button' onClick={this.props.onClick}>\r\n                <div className='plus' >\r\n                    <div className=\"line-horizontal\"></div>\r\n                    <div className=\"line-vertical\"></div>\r\n                </div>\r\n                <div className='button-text'>{this.props.text}</div>\r\n            </button>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport './custom.css';\r\n\r\nexport class CustomerButton extends Component {\r\n\r\n    static displayName = CustomerButton.name;\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <button id={this.props.id} className='add-button' onClick={this.props.onClick}>\r\n                <div className='button-text'>{this.props.text}</div>\r\n            </button>\r\n        );\r\n    }\r\n\r\n}","export class DateManipulator {\r\n\r\n\r\n\r\n    static parseDateFromLocalDateString(dateString) {\r\n        let splittedDate = dateString.split('.');\r\n        let offset = new Date().getTimezoneOffset();\r\n        let d = new Date(splittedDate[2], splittedDate[1] - 1, splittedDate[0], 0, -offset);\r\n        return d;\r\n    }\r\n    static getOneDayMilliseconds() {\r\n        return 1000 * 60 * 60 * 24;\r\n    }\r\n\r\n\r\n    static check(dateString) {\r\n        let splittedDate = dateString.split('.');\r\n        let now = new Date();\r\n        let offset = now.getTimezoneOffset();\r\n        let d = new Date(splittedDate[2], splittedDate[1] - 1, splittedDate[0], 0, -offset);\r\n        if (d.getTime() > now.getTime()) return false;\r\n        if (d.getDate() != splittedDate[0]) return false;\r\n        if (d.getMonth() != splittedDate[1] - 1) return false;\r\n        if (d.getFullYear() != splittedDate[2]) return false;\r\n        return true;\r\n    }\r\n    static localDateStringToIso(dateString) {\r\n        let splittedDate = dateString.split('.');\r\n        let offset = new Date().getTimezoneOffset();\r\n        let d = new Date(splittedDate[2], splittedDate[1] - 1, splittedDate[0], 0, -offset);\r\n        let iso = d.toISOString();\r\n        return iso;\r\n    }\r\n    static isoToLocalDateString(dateString) {\r\n        return new Date(dateString).toLocaleDateString();\r\n    }\r\n\r\n}","export class DOMManipulator {\r\n\r\n    static checkFields(array) {\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i].valid == false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static changeValue(id, newValue = '') {\r\n        let input = document.getElementById(id);\r\n        input.value = newValue;\r\n\r\n    }\r\n    static removeElementById(id) {\r\n        let element = document.getElementById(id);\r\n        element.remove();\r\n    }\r\n    static getValueById(id) {\r\n        let input = document.getElementById(id);\r\n        return input.value;\r\n    }\r\n}","const store = []\r\nexport default store","import { DateManipulator } from \"./DateManipulator\";\r\nimport { DOMManipulator } from \"./DOMManipulator\";\r\n\r\nimport store from '../InputsStore'\r\n\r\nexport class UsersManipulator {\r\n    \r\n    static checkData(data) {\r\n        let correct = DOMManipulator.checkFields(store);\r\n        if (!correct) {\r\n            alert('One of the fields (red color) is incorrectly filled.');\r\n            return false;\r\n        }\r\n        if (!UsersManipulator.checkDistinctIds(data)) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            \r\n            let id = DOMManipulator.getValueById('userID' + i);\r\n            let reg = DOMManipulator.getValueById('regDate' + i);\r\n            let last = DOMManipulator.getValueById('lastDate' + i);\r\n            if (!DateManipulator.check(reg)) {\r\n                alert('Incorrect registration date in row ' + (i + 1));\r\n                return false;\r\n            }\r\n            \r\n            if (!DateManipulator.check(last)) {\r\n                alert('Incorrect last activity date in row ' + (i + 1));\r\n                return false;\r\n            }\r\n            let currentLife = UsersManipulator.getLifeTime(data[i]);\r\n            if (currentLife < 0) {\r\n                alert('Incorrect dates. [ id: ' + data[i].id + ' registration: ' + data[i].registrationDate + ' last activity: ' + data[i].lastActivityDate + ' ]');\r\n                return;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static getLifeTime(user) {\r\n        let reg = DateManipulator.parseDateFromLocalDateString(user.registrationDate);\r\n        let last = DateManipulator.parseDateFromLocalDateString(user.lastActivityDate);\r\n        let oneDay = DateManipulator.getOneDayMilliseconds();\r\n        return Math.ceil((last.getTime() - reg.getTime()) / (oneDay));\r\n    }\r\n    static buildDataForChart(users) {\r\n        let lifes = [];\r\n        let result = [];\r\n        let min = 999999999;\r\n        let max = -1;\r\n        for (var i = 0; i < users.length; i++) {\r\n            let currentLifeTime = UsersManipulator.getLifeTime(users[i]);\r\n            min = Math.min(min, currentLifeTime);\r\n            max = Math.max(max, currentLifeTime);\r\n            lifes.push(currentLifeTime);\r\n        }\r\n        let addition = Math.ceil((max - min) / 25);\r\n        if (min == max) {\r\n            return [{ value: min, frequency: users.length }];\r\n        }\r\n        for (var i = min; i <= max; i += addition) {\r\n            let value = addition == 1 ? i : \"[ \" + i + \" - \" + (i + addition - 1) + \" ]\";\r\n\r\n            result.push({ value: value, frequency: lifes.filter((v, index, a) => v >= i && v <= i + addition - 1).length });\r\n        }\r\n        return result;\r\n    }\r\n    static getRegistrationOffset(user) {\r\n        let reg = DateManipulator.parseDateFromLocalDateString(user.registrationDate);\r\n        let now = new Date();\r\n        let oneDay = DateManipulator.getOneDayMilliseconds();\r\n        return Math.ceil((now.getTime() - reg.getTime()) / (oneDay));\r\n    }\r\n    static rollingRetationXDays(users, x = 7) {\r\n        let returnCount = 0;\r\n        let regCount = 0;\r\n        for (var i = 0; i < users.length; i++) {\r\n            let lifeTime = UsersManipulator.getLifeTime(users[i]);\r\n            if (lifeTime >= x) {\r\n                returnCount++;\r\n            }\r\n            let regTime = UsersManipulator.getRegistrationOffset(users[i]);\r\n            if (regTime >= x) {\r\n                regCount++;\r\n            }\r\n        }\r\n        return returnCount / regCount * 100;\r\n    }\r\n    static checkDistinctIds(users) {\r\n\r\n\r\n        for (var i = 0; i < users.length; i++) {\r\n            var index = users.findIndex((v, ind, o) => v.id == users[i].id).toString();\r\n            if (i.toString() != index) {\r\n                alert('Duplicates finded in raw ' + (i + 1));\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","\r\nimport React, { Component } from 'react'\r\n\r\nexport class Chart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        this.renderChart();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"myCanvas\" style={{ background: \"white\" }}></canvas>\r\n                <legend id=\"forMyCanvas\"></legend>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    renderChart() {\r\n\r\n\r\n        var myCanvas = document.getElementById(\"myCanvas\");\r\n        myCanvas.width = document.documentElement.clientWidth * 0.95;\r\n        myCanvas.height = document.documentElement.clientHeight * 0.5;\r\n\r\n        var ctx = myCanvas.getContext(\"2d\");\r\n\r\n        function drawLine(ctx, startX, startY, endX, endY, color) {\r\n            ctx.save();\r\n            ctx.strokeStyle = color;\r\n            ctx.beginPath();\r\n            ctx.moveTo(startX, startY);\r\n            ctx.lineTo(endX, endY);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawBar(ctx, upperLeftCornerX, upperLeftCornerY, width, height, color) {\r\n            ctx.save();\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(upperLeftCornerX, upperLeftCornerY, width, height);\r\n            ctx.restore();\r\n        }\r\n\r\n\r\n\r\n        var Barchart = function (options) {\r\n            this.options = options;\r\n            this.canvas = options.canvas;\r\n            this.ctx = this.canvas.getContext(\"2d\");\r\n            this.colors = options.colors;\r\n            let data = this.options.data;\r\n            this.draw = function () {\r\n                let offsetX = 30;\r\n                var maxValue = -1;\r\n                for (var i = 0; i < data.length; i++) {\r\n                    maxValue = Math.max(maxValue, data[i].frequency);\r\n                }\r\n                var canvasActualHeight = this.canvas.height - this.options.padding * 2;\r\n                var canvasActualWidth = this.canvas.width - this.options.padding * 2;\r\n\r\n                //drawing the grid lines\r\n                var gridValue = 0;\r\n                while (gridValue <= maxValue) {\r\n                    var gridY = canvasActualHeight * (1 - gridValue / maxValue) + this.options.padding;\r\n                    drawLine(\r\n                        this.ctx,\r\n                        offsetX,\r\n                        gridY,\r\n                        this.canvas.width,\r\n                        gridY,\r\n                        this.options.gridColor\r\n                    );\r\n\r\n                    //writing grid markers\r\n                    this.ctx.save();\r\n                    this.ctx.fillStyle = this.options.gridColor;\r\n                    this.ctx.textBaseline = \"bottom\";\r\n                    this.ctx.font = \"bold 10px Arial\";\r\n                    this.ctx.fillText(gridValue, offsetX + 10, gridY - 2);\r\n                    this.ctx.restore();\r\n\r\n                    gridValue += maxValue * 0.05;\r\n                    gridValue = Math.ceil(gridValue);\r\n                }\r\n\r\n                //drawing the bars\r\n                var numberOfBars = data.length;\r\n                var barSize = (canvasActualWidth) / numberOfBars;\r\n                barSize = Math.min(canvasActualWidth / 25, barSize);\r\n                for (var i = 0; i < data.length; i++) {\r\n                    var val = data[i].frequency;\r\n                    var barHeight = Math.round(canvasActualHeight * val / maxValue);\r\n                    let upperLeftCornerX = offsetX + 10 + this.options.padding + i * barSize;\r\n                    let color = this.colors[i % this.colors.length];\r\n                    drawBar(\r\n                        this.ctx,\r\n                        upperLeftCornerX,\r\n                        this.canvas.height - barHeight - this.options.padding,\r\n                        barSize,\r\n                        barHeight,\r\n                        color\r\n                    );\r\n                    //drawing series name\r\n                    this.ctx.save();\r\n                    this.ctx.textBaseline = \"bottom\";\r\n                    this.ctx.textAlign = \"center\";\r\n                    this.ctx.fillStyle = color;\r\n                    this.ctx.font = \"bold 14px Arial\";\r\n\r\n                        this.ctx.fillText(data[i].value, upperLeftCornerX + barSize / 2, this.canvas.height - this.options.padding / 2);\r\n                    if (data[i].frequency > 0) {\r\n\r\n                        this.ctx.fillStyle = \"#000000\";\r\n                        this.ctx.fillText(data[i].frequency, upperLeftCornerX + barSize / 2, this.canvas.height - this.options.padding - barHeight);\r\n                    }\r\n                    this.ctx.restore();\r\n                }\r\n                this.ctx.save();\r\n                this.ctx.textBaseline = \"bottom\";\r\n                this.ctx.textAlign = \"center\";\r\n                this.ctx.fillStyle = \"#000000\";\r\n                this.ctx.font = \"bold 14px Arial\";\r\n                this.ctx.fillText(\"Life Cycle\", canvasActualWidth / 2, this.canvas.height);\r\n                this.ctx.restore();\r\n\r\n                this.ctx.save();\r\n                this.ctx.textBaseline = \"bottom\";\r\n                this.ctx.textAlign = \"center\";\r\n                this.ctx.fillStyle = \"#000000\";\r\n                this.ctx.font = \"bold 14px Arial\";\r\n                ctx.font = '20px/1 sans-serif';\r\n                ctx.textAlign = \"center\";\r\n                var str = \"Frequency\";\r\n                for (var i = 0; i < str.length; i++) {\r\n                    ctx.fillText(str[i], 10, 80 + 20 * (i + 1));\r\n                }\r\n                this.ctx.restore();\r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n        var myBarchart = new Barchart(\r\n            {\r\n                canvas: myCanvas,\r\n                seriesName: \"Life distribution\",\r\n                padding: 30,\r\n                gridColor: \"#888888\",\r\n                data: this.props.data,\r\n                colors: [\"#a55ca5\"]\r\n            }\r\n        );\r\n        myBarchart.draw();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import React, { Component } from 'react'\r\nimport store from './InputsStore'\r\nexport class InputBlock extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            value: this.props.value\r\n        }\r\n        store.push({ id: this.props.id, valid: true });\r\n    }\r\n    handleChange(event) {\r\n        let valid = !event.target.validity.patternMismatch;\r\n        let id = this.props.id;\r\n        let a = [];\r\n        let index = store.findIndex((val, i, a) => val.id == id);\r\n        store[index].valid = valid;\r\n\r\n        this.setState({ value: event.target.value });\r\n    }\r\n    componentWillUnmount() {\r\n        let id = this.props.id;\r\n        let index = store.findIndex((val, i, a) => val.id == id);\r\n        store.splice(index,1);\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <input pattern={this.props.pattern} className='input-block' type=\"text\" placeholder={this.props.placeHolder} id={this.props.id} value={this.state.value} onChange={this.handleChange} />\r\n        );\r\n    }\r\n}","import { Chart } from \"../Chart\";\r\nimport { UsersManipulator } from \"./UsersManipulator\";\r\nimport React from 'react';\r\nimport { Home } from \"../Home\";\r\nimport { InputBlock } from \"../InputBlock\";\r\nimport { CustomerButton } from \"../CustomerButton\";\r\nexport class RenderManipulator {\r\n    static renderChart(users, key = 0) {\r\n\r\n        let data = UsersManipulator.buildDataForChart(users);\r\n        return (\r\n            \r\n            <Chart key={key + 'chart'} data={data} />\r\n        );\r\n    }\r\n    static renderRolling(users, key = 0, daysAmount = 7) {\r\n        \r\n\r\n\r\n        let rolling = UsersManipulator.rollingRetationXDays(users, daysAmount);\r\n        let message = isNaN(rolling) ? \"The number of users who registered later than \" + daysAmount + \" days is zero. Rolling Retention \" + daysAmount + \" day is NaN.\" : \"Rolling Retention \" + daysAmount + \" day is equal \" + rolling.toFixed(2) + \" %\";\r\n\r\n        return (\r\n            <div key={key + 'rolling'}>{message}</div>\r\n        );\r\n        \r\n    }\r\n\r\n    static renderTable(users, removeCallback, key = 0) {\r\n        \r\n        return (\r\n            <table className='table table-striped'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <div className=\"field-header\">User Id</div>\r\n                        </th>\r\n                        <th>\r\n                            <div className=\"field-header\">Date Registration</div>\r\n                        </th>\r\n                        <th>\r\n                            <div className=\"field-header\">Date Last Activity</div>\r\n                        </th>\r\n                        <th>\r\n                            <div className=\"field-header\">Remove</div>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((user, index) =>\r\n                        < tr key={key + index} id={'user' + index} >\r\n                            <td>\r\n                                <InputBlock placeHolder=\"number\" pattern=\"[0-9]{1,9}\" value={user.id} id={\"userID\" + index} />\r\n                            </td>\r\n                            <td>\r\n                                <InputBlock placeHolder=\"dd.mm.yyyy\" pattern=\"[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{4}\" value={user.registrationDate} id={\"regDate\" + index} />\r\n                            </td>\r\n                            <td>\r\n                                <InputBlock placeHolder=\"dd.mm.yyyy\" pattern=\"[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{4}\" value={user.lastActivityDate} id={\"lastDate\" + index} />\r\n                            </td>\r\n                            <td>\r\n                                <CustomerButton text=\"Remove\" id={\"remove\" + index} onClick={removeCallback} />\r\n                            </td>\r\n                        </tr >\r\n                    )}\r\n\r\n                </tbody>\r\n            </table>\r\n        );\r\n\r\n    }\r\n}","import React, { Component, useState } from 'react';\r\nimport { AddButton } from './AddButton';\r\nimport './custom.css';\r\nimport { CustomerButton } from './CustomerButton';\r\nimport { DateManipulator } from './Manipulators/DateManipulator';\r\nimport { DOMManipulator } from './Manipulators/DOMManipulator';\r\nimport { UsersManipulator } from './Manipulators/UsersManipulator';\r\nimport { RenderManipulator } from './Manipulators/RenderManipulator';\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userRetentionDtos: [],\r\n            counter: 0,\r\n            loading: true,\r\n            countOfErrorFields: 0,\r\n            uniqueKey: 0,\r\n            showCharts: false\r\n        };\r\n        this.onAdd = this.onAdd.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n        this.onCalculate = this.onCalculate.bind(this);\r\n        this.onRemove = this.onRemove.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.getUsers();\r\n    }\r\n    updateUniqueKey() {\r\n        this.setState({ uniqueKey: new Date().getTime() });\r\n    }\r\n    updateUsersData() {\r\n        let dtos = this.state.userRetentionDtos;\r\n        let users = [];\r\n        let counter = 0;\r\n        for (var i = 0; i < dtos.length; i++) {\r\n            let id = DOMManipulator.getValueById('userID' + i);\r\n            let reg = DOMManipulator.getValueById('regDate' + i);\r\n            let last = DOMManipulator.getValueById('lastDate' + i);\r\n            let values = 'vals' + id + reg + last;\r\n            if (values === 'vals') {\r\n                continue;\r\n\r\n            }\r\n\r\n            users.push({ id: id, registrationDate: reg, lastActivityDate: last });\r\n            counter++;\r\n        }\r\n\r\n        return users;\r\n    }\r\n    async onSave() {\r\n        let users = [];\r\n        let dtos = this.updateUsersData();\r\n        if (!UsersManipulator.checkData(dtos)) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < dtos.length; i++) {\r\n\r\n            users.push({ id: dtos[i].id, registrationDate: DateManipulator.localDateStringToIso(dtos[i].registrationDate), lastActivityDate: DateManipulator.localDateStringToIso(dtos[i].lastActivityDate) });\r\n        }\r\n        let json = JSON.stringify(users);\r\n        this.setState({ userRetentionDtos: dtos });\r\n        fetch('/retention/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: json\r\n\r\n        })\r\n        alert('Data saved');\r\n    }\r\n    onCalculate() {\r\n        let dtos = this.updateUsersData();\r\n        this.updateUniqueKey();\r\n        if (dtos.length == 0) {\r\n            alert('No data for calculating');\r\n            return;\r\n        }\r\n        if (!UsersManipulator.checkData(dtos)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ userRetentionDtos: dtos, showCharts: true });\r\n    }\r\n    removeEmptyFields() {\r\n        var users = this.updateUsersData();\r\n        this.updateUniqueKey();\r\n\r\n        this.setState({ userRetentionDtos: users, showCharts: false });\r\n    }\r\n    onRemove(event) {\r\n        let id = event.currentTarget.id.replace('remove', '');\r\n        DOMManipulator.changeValue('userID' + id);\r\n        DOMManipulator.changeValue('regDate' + id);\r\n        DOMManipulator.changeValue('lastDate' + id);\r\n        this.removeEmptyFields();\r\n    }\r\n    onAdd() {\r\n        this.removeEmptyFields();\r\n        let users = this.state.userRetentionDtos;\r\n        let date = new Date();\r\n        let dateNow = date.toLocaleDateString();\r\n        let newId = 1;\r\n        while (users.filter((v, index, a) => v.id == newId).length > 0) {\r\n            newId++;\r\n        }\r\n        users.unshift({ id: newId, registrationDate: dateNow, lastActivityDate: dateNow });\r\n        this.setState(prevState => ({\r\n            counter: prevState.counter + 1,\r\n            userRetentionDtos: users,\r\n            showCharts: false\r\n        }));\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let rolling = this.state.showCharts ? RenderManipulator.renderRolling(this.state.userRetentionDtos, this.state.uniqueKey) : <p><em>Press calculate button to show Rolling Retention info:)</em></p>;\r\n        let chart = this.state.showCharts ? RenderManipulator.renderChart(this.state.userRetentionDtos, this.state.uniqueKey) : <p><em>Press calculate button to show Life Cycle distribution :)</em></p>;\r\n        let table = this.state.loading ? <p><em>Loading...</em></p> : RenderManipulator.renderTable(this.state.userRetentionDtos, this.onRemove, this.state.uniqueKey);\r\n        return (\r\n            <div >\r\n\r\n                {chart}\r\n                {rolling}\r\n                <div>\r\n                    <AddButton text=\"Add one more\" onClick={this.onAdd} />\r\n                    <CustomerButton text=\"Save\" onClick={this.onSave} />\r\n                    <CustomerButton text=\"Calculate\" onClick={this.onCalculate} />\r\n                </div>\r\n                {table}\r\n            </div>\r\n        );\r\n\r\n    }\r\n    \r\n    async getUsers() {\r\n        const response = await fetch('retention');\r\n        const data = await response.json();\r\n        let users = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            users.push({ id: data[i].id, registrationDate: DateManipulator.isoToLocalDateString(data[i].registrationDate), lastActivityDate: DateManipulator.isoToLocalDateString(data[i].lastActivityDate) });\r\n        }\r\n        this.setState({ userRetentionDtos: users, loading: false });\r\n    }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Home } from './components/Home'\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\ndocument.title = \"Rolling Retention\";\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <Home />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}